use super::super::area::Bits8;
use crate::cpu::Registers;
use num_enum::TryFromPrimitive;
use shared::{traits::Bus, Error};
use crate::cpu::area::Bits16;

#[derive(Debug, Eq, PartialEq, TryFromPrimitive)]
#[repr(u8)]
pub enum LoadReg1Reg2 {
    AA = 0x7f,
    AB = 0x78,
    AC = 0x79,
    AD = 0x7a,
    AE = 0x7b,
    AH = 0x7c,
    AL = 0x7d,
    AHL = 0x7e,
    BB = 0x40,
    BC = 0x41,
    BD = 0x42,
    BE = 0x43,
    BH = 0x44,
    BL = 0x45,
    BHL = 0x46,
    CB = 0x48,
    CC = 0x49,
    CD = 0x4a,
    CE = 0x4b,
    CH = 0x4c,
    CL = 0x4d,
    CHL = 0x4e,
    DB = 0x50,
    DC = 0x51,
    DD = 0x52,
    DE = 0x53,
    DH = 0x54,
    DL = 0x55,
    DHL = 0x56,
    EB = 0x58,
    EC = 0x59,
    ED = 0x5A,
    EE = 0x5B,
    EH = 0x5C,
    EL = 0x5D,
    EHL = 0x5E,
    HB = 0x60,
    HC = 0x61,
    HD = 0x62,
    HE = 0x63,
    HH = 0x64,
    HL = 0x65,
    HHL = 0x66,
    LB = 0x68,
    LC = 0x69,
    LD = 0x6A,
    LE = 0x6B,
    LH = 0x6C,
    LL = 0x6D,
    LHL = 0x6E,
    HLB = 0x70,
    HLC = 0x71,
    HLD = 0x72,
    HLE = 0x73,
    HLH = 0x74,
    HLL = 0x75,
    HLn = 0x36,
}

impl<'a> LoadReg1Reg2 {
    pub fn proceed(self, registers: &'a mut Registers) -> Result<u32, Error> {
        match self {
            LoadReg1Reg2::AA => registers.set(Bits8::A, registers.get(Bits8::A)),
            LoadReg1Reg2::AB => registers.set(Bits8::A, registers.get(Bits8::B)),
            LoadReg1Reg2::AC => registers.set(Bits8::A, registers.get(Bits8::C)),
            LoadReg1Reg2::AD => registers.set(Bits8::A, registers.get(Bits8::D)),
            LoadReg1Reg2::AE => registers.set(Bits8::A, registers.get(Bits8::E)),
            LoadReg1Reg2::AH => registers.set(Bits8::A, registers.get(Bits8::H)),
            LoadReg1Reg2::AL => registers.set(Bits8::A, registers.get(Bits8::L)),
            LoadReg1Reg2::AHL => (), //registers.set(Bits16::A, registers.get(Bits16::HL)),
            LoadReg1Reg2::BB => registers.set(Bits8::B, registers.get(Bits8::B)),
            LoadReg1Reg2::BC => registers.set(Bits8::B, registers.get(Bits8::C)),
            LoadReg1Reg2::BD => registers.set(Bits8::B, registers.get(Bits8::D)),
            LoadReg1Reg2::BE => registers.set(Bits8::B, registers.get(Bits8::E)),
            LoadReg1Reg2::BH => registers.set(Bits8::B, registers.get(Bits8::H)),
            LoadReg1Reg2::BL => registers.set(Bits8::B, registers.get(Bits8::L)),
            LoadReg1Reg2::BHL => (), //registers.set(Bits16::B, registers.get(Bits16::HL)),
            LoadReg1Reg2::CB => registers.set(Bits8::C, registers.get(Bits8::B)),
            LoadReg1Reg2::CC => registers.set(Bits8::C, registers.get(Bits8::C)),
            LoadReg1Reg2::CD => registers.set(Bits8::C, registers.get(Bits8::D)),
            LoadReg1Reg2::CE => registers.set(Bits8::C, registers.get(Bits8::E)),
            LoadReg1Reg2::CH => registers.set(Bits8::C, registers.get(Bits8::H)),
            LoadReg1Reg2::CL => registers.set(Bits8::C, registers.get(Bits8::L)),
            LoadReg1Reg2::CHL => (), //registers.set(Bits16::C, registers.get(Bits16::HL)),
            LoadReg1Reg2::DB => registers.set(Bits8::D, registers.get(Bits8::B)),
            LoadReg1Reg2::DC => registers.set(Bits8::D, registers.get(Bits8::C)),
            LoadReg1Reg2::DD => registers.set(Bits8::D, registers.get(Bits8::D)),
            LoadReg1Reg2::DE => registers.set(Bits8::D, registers.get(Bits8::E)),
            LoadReg1Reg2::DH => registers.set(Bits8::D, registers.get(Bits8::H)),
            LoadReg1Reg2::DL => registers.set(Bits8::D, registers.get(Bits8::L)),
            LoadReg1Reg2::DHL => (), //registers.set(Bits16::D, registers.get(Bits16::HL)),
            LoadReg1Reg2::EB => registers.set(Bits8::E, registers.get(Bits8::B)),
            LoadReg1Reg2::EC => registers.set(Bits8::E, registers.get(Bits8::C)),
            LoadReg1Reg2::ED => registers.set(Bits8::E, registers.get(Bits8::D)),
            LoadReg1Reg2::EE => registers.set(Bits8::E, registers.get(Bits8::E)),
            LoadReg1Reg2::EH => registers.set(Bits8::E, registers.get(Bits8::H)),
            LoadReg1Reg2::EL => registers.set(Bits8::E, registers.get(Bits8::L)),
            LoadReg1Reg2::EHL => (), //registers.set(Bits16::E, registers.get(Bits16::HL)),
            LoadReg1Reg2::HB => registers.set(Bits8::H, registers.get(Bits8::B)),
            LoadReg1Reg2::HC => registers.set(Bits8::H, registers.get(Bits8::C)),
            LoadReg1Reg2::HD => registers.set(Bits8::H, registers.get(Bits8::D)),
            LoadReg1Reg2::HE => registers.set(Bits8::H, registers.get(Bits8::E)),
            LoadReg1Reg2::HH => registers.set(Bits8::H, registers.get(Bits8::H)),
            LoadReg1Reg2::HL => registers.set(Bits8::H, registers.get(Bits8::L)),
            LoadReg1Reg2::HHL => (), //registers.set(Bits16::C, registers.get(Bits16::HL)),
            LoadReg1Reg2::LB => registers.set(Bits8::L, registers.get(Bits8::B)),
            LoadReg1Reg2::LC => registers.set(Bits8::L, registers.get(Bits8::C)),
            LoadReg1Reg2::LD => registers.set(Bits8::L, registers.get(Bits8::D)),
            LoadReg1Reg2::LE => registers.set(Bits8::L, registers.get(Bits8::E)),
            LoadReg1Reg2::LH => registers.set(Bits8::L, registers.get(Bits8::H)),
            LoadReg1Reg2::LL => registers.set(Bits8::L, registers.get(Bits8::L)),
            LoadReg1Reg2::LHL => (), //registers.set(Bits16::L, registers.get(Bits16::HL)),
            // LoadReg1Reg2::HLB => registers.set(Bits16::HL, registers.get(Bits16::B)),
            // LoadReg1Reg2::HLC => registers.set(Bits16::HL, registers.get(Bits16::C)),
            // LoadReg1Reg2::HLD => registers.set(Bits16::HL, registers.get(Bits16::D)),
            // LoadReg1Reg2::HLE => registers.set(Bits16::HL, registers.get(Bits16::E)),
            // LoadReg1Reg2::HLH => registers.set(Bits16::HL, registers.get(Bits16::H)),
            // LoadReg1Reg2::HLL => registers.set(Bits16::HL, registers.get(Bits16::L)),
            // LoadReg1Reg2::HLn => registers.set(Bits16::HL, registers.get(Bits16::memory)),
            _ => (),
        }
        Ok(())
    }
}
